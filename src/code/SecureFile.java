/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package code;

import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.util.List;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileFilter;
import javax.swing.JOptionPane;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import jdk.nashorn.internal.ir.LexicalContextNode;

/**
 *
 * @author user
 */
public class SecureFile extends javax.swing.JFrame {
    
    public String PATH = "";
    public long key;
    public String message = "";
    public static int x;
    public static int y;
    public static String user_name = null;
    
    public static File f;
    
    private Connection con = null;
    private PreparedStatement statement = null;

    /**
     * Creates new form Register
     */
    public SecureFile() {
        initComponents();
        user_name = "abcd";
    }
    public SecureFile(String name) {
        initComponents();
        user_name = name;
        bannerLabel.setText("Welcome "+user_name+"...");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encryptButton = new javax.swing.JButton();
        decryptButton = new javax.swing.JButton();
        bannerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        encryptButton.setText("Encrypt");
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        decryptButton.setText("Decrypt");
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        bannerLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                .addComponent(decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bannerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(bannerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        loadImage();
        getKey();
        if(PATH.length()> 1){
            try {
                Encryption enc = new Encryption();
                message = enc.encrypt(PATH, key);
                bannerLabel.setText(message);
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_encryptButtonActionPerformed

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        loadImage();
        getKey();
        if(PATH.length()> 1){
            try {
                Decryption dec = new Decryption();
                message = dec.decrypt(PATH, key);
                bannerLabel.setText(message);
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_decryptButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public void getKey(){
        
        int charMed = 0;
        String keyString = "";
        for(int i = 0;i<user_name.length();i++){
            charMed += (int) user_name.charAt(i);
        }
        keyString += (int) charMed/user_name.length();
        List<Integer> pattern = retrievePattern(user_name);
        for(int i=0; i<4; i++){
            keyString += pattern.get(i).toString();
        }
        key = Long.parseLong(keyString);
        System.out.println("key" + key);
        System.out.println("keyStrng" + keyString);
        
    }
    
    public List<Integer> retrievePattern(String name){
        con = DBConnection.connectDB();
        List<Integer> temporyPattern = new ArrayList<Integer>();
        try{
            statement = con.prepareStatement("select * from user where name like ?");
            statement.setString(1, name);
            ResultSet rs = statement.executeQuery();
            if(rs.next()){
                String s = rs.getString("pattern");
                String tempNum = "";
                for(int i = 0; i<s.length(); i++){
                    char c = s.charAt(i);
                    if(Character.isDigit(c)){
                        tempNum += c; 
                    }else if(c == ',' || (tempNum != "" && Integer.parseInt(tempNum) > 0)){
                        temporyPattern.add(Integer.parseInt(tempNum));
                        tempNum = "";
                    }  
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return temporyPattern;
    }
    
    public void loadImage(){
        try
            {
                JFileChooser chooser = new JFileChooser("C:\\Users\\Charith\\Pictures");
                chooser.setAcceptAllFileFilterUsed(false);
                FileNameExtensionFilter jpeg = new FileNameExtensionFilter("Image JPEG", "jpeg");
                FileNameExtensionFilter jpg = new FileNameExtensionFilter("Image JPG", "jpg");
                FileNameExtensionFilter png = new FileNameExtensionFilter("Image PNG", "png");
                chooser.addChoosableFileFilter(jpg);
                chooser.addChoosableFileFilter(png);
                chooser.addChoosableFileFilter(jpeg);
                int returnVal = chooser.showOpenDialog(this);
                
                    
                if(returnVal == JFileChooser.APPROVE_OPTION)
                {
                    f = chooser.getSelectedFile();
                    PATH = f.getCanonicalPath();
                    System.out.println(PATH);
                }
                
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecureFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecureFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecureFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecureFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SecureFile().setVisible(true);
            }
        });
    }
    private List<Integer> pattern = new ArrayList<Integer>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bannerLabel;
    private javax.swing.JButton decryptButton;
    private javax.swing.JButton encryptButton;
    // End of variables declaration//GEN-END:variables
}
